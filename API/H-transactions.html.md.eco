---
title: "Transactions"
anchor: "transactions"
type: "apiDoc"
---


A transaction is the charging of a credit card or a direct debit. In this case you need a new transaction object with either a valid token, payment, client + payment or preauthorization. Every transaction has a unique identifier which will be generated by Paymill to identify every transaction. You can issue/create, list and display transactions in detail. Refunds can be done in an extra entity.

## `Transaction` object

> Example

```
{
    "id" : "tran_54645bcb98ba7acfe204",
    "amount" : "4200",
    "origin_amount" : 4200,
    "status" : "closed",
    "description" : null,
    "livemode" : false,
    "refunds" : null,
    "client" : "<Object>",
    "currency" : "EUR",
    "created_at" : 1349946151,
    "updated_at" : 1349946151,
    "response_code" : 20000,
    "short_id" : "0000.1212.3434",
    "is_fraud" : false,
    "invoices" : [],
    "app_id" : null,
    "preauthorization" : null,
    "fees" : [],
    "payment" : "<Object>",
    "is_refundable" : true,
    "is_markable_as_fraud" : true
}
```

> Sub objects

```eco
- transaction.refunds returns refund objects
- transaction.payment returns a payment object for credit card
- transaction.client returns a client object
- transaction.preauthorization returns a preauthorization object
```

Attribute                 | Type                                                                                        | Description 
--------------------------|---------------------------------------------------------------------------------------------|-----------------
id                        | string                                                                                      | Unique identifier for this preauthorization
amount                    | string                                                                                      | Formatted amount of this transaction
origin_amount             | integer (>0)                                                                                | The used amount, smallest possible unit per currency (for euro, we’re calculating the amount in cents)
status                    | enum (open, pending, closed, failed, partial_refunded, refunded, preauthorize, chargeback)  | Indicates the current status of this transaction, e.g closed means the transaction is sucessfully transfered, refunded means that the amount is fully or in parts refunded.
description               | string or null                                                                              | Need a additional description for this transaction? Maybe your shopping cart ID or something like that?
livemode                  | boolean                                                                                     | Whether this preauthorization was issued while being in live mode or not
refunds                   | list refund objects / null                                                                  |
client                    | client object / null                                                                        |
currency                  | string                                                                                      | ISO 4217 formatted currency code
created_at                | integer                                                                                     | Unix-Timestamp for the creation date
updated_at                | integer                                                                                     | Unix-Timestamp for the last update
response_code             | integer                                                                                     | Response code
short_id                  | string                                                                                      | Unique identifier of this transaction provided to the acquirer for the statements
is_fraud                  | boolean                                                                                     | The transaction is marked as fraud or not
invoices                  | list                                                                                        | PAYMILL invoice where the transaction fees are charged or null
app_id                    | string / null                                                                               | App (ID) that created this transaction or null if created by yourself
preauthorization          | preauthorizations-object / null                                                             |
fees                      | list                                                                                        | App fees or null
payment                   | creditcard-object / directdebit-object / null                                               |
is_refundable             | boolean                                                                                     | The transaction is refundable or not
is_markable_as_fraud      | boolean                                                                                     | The transaction is markable is fraud or not


## Create new `Transaction`

> ### With payment

> Request

```bash
curl https://api.paymill.com/v2.1/transactions \
  -u <YOUR_PRIVATE_KEY>: \
  -d "amount=4200" \
  -d "currency=EUR" \
  -d "payment=pay_2f82a672574647cd911d" \
  -d "description=Test Transaction"
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/create_new_transaction_with_payment.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/create_new_transaction_with_payment.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/create_new_transaction_with_payment.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/create_new_transaction_with_payment.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/create_new_transaction_with_payment.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/create_new_transaction_with_payment.cs') %>
```

> Response

```
{
    "data" : {
        "id" : "tran_1f42e10cf14301067332",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "Test Transaction",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```

> ### With token

> Request

```bash
curl https://api.paymill.com/v2.1/transactions \
  -u <YOUR_PRIVATE_KEY>: \
  -d "amount=4200" \
  -d "currency=EUR" \
  -d "token=098f6bcd4621d373cade4e832627b4f6" \
  -d "description=Test Transaction"
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/create_new_transaction_with_token.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/create_new_transaction_with_token.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/create_new_transaction_with_token.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/create_new_transaction_with_token.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/create_new_transaction_with_token.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/create_new_transaction_with_token.cs') %>
```

> Response

```
{
    "data" : {
        "id" : "tran_b3692e8e063900d27a40",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "Test Transaction",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```

> ### With client and payment

> Request

```bash
curl https://api.paymill.com/v2.1/transactions \
  -u <YOUR_PRIVATE_KEY>: \
  -d "amount=4200" \
  -d "currency=EUR" \
  -d "client=client_c781b1d2f7f0f664b4d9" \
  -d "payment=pay_a818b847db6ce5ff636f" \
  -d "description=Test Transaction"
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/create_new_transaction_with_client_and_payment.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/create_new_transaction_with_client_and_payment.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/create_new_transaction_with_client_and_payment.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/create_new_transaction_with_client_and_payment.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/create_new_transaction_with_client_and_payment.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/create_new_transaction_with_client_and_payment.cs') %>
```

> Response

```
{
    "data" : {
        "id" : "tran_663dada2ffd9b47bd1bf",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "Test Transaction",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```

> ### With preauthorization

> Request

```bash
curl https://api.paymill.com/v2.1/transactions \
  -u <YOUR_PRIVATE_KEY>: \
  -d "amount=4200" \
  -d "currency=EUR" \
  -d "preauthorization=preauth_ec54f67e52e92051bd65" \
  -d "description=Test Transaction"
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/create_new_transaction_with_preauthorization.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/create_new_transaction_with_preauthorization.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/create_new_transaction_with_preauthorization.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/create_new_transaction_with_preauthorization.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/create_new_transaction_with_preauthorization.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/create_new_transaction_with_preauthorization.cs') %>
```

> Response

```
{
    "data" : {
        "id" : "tran_ca3e7d41fb16d0157a99",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "Test Transaction",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```

> ### With app fee

> Request

```bash
curl https://api.paymill.com/v2.1/transactions \
  -u <YOUR_PRIVATE_KEY>: \
  -d "amount=4200" \
  -d "currency=EUR" \
  -d "token=098f6bcd4621d373cade4e832627b4f6" \
  -d "description=Test Transaction" \
  -d "fee_amount=420" \
  -d "fee_payment=pay_3af44644dd6d25c820a8" \
  -d "fee_currency=EUR"
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/create_new_transaction_with_app_fee.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/create_new_transaction_with_app_fee.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/create_new_transaction_with_app_fee.js') %>
```

```pythoon
<%- @partial('snippets/python/samples/transactions/create_new_transaction_with_app_fee.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/create_new_transaction_with_app_fee.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/create_new_transaction_with_app_fee.cs') %>
```

> Response

```
{
    "data" : {
    "id" : "tran_ca3e7d41fb16d0157a99",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "Test Transaction",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [
          {
            "type" : "application",
            "application" : "app_1d70acbf80c8c35ce83680715c06be0",
            "payment" : "pay_3af44644dd6d25c820a8",
            "amount" : 420,
            "currency" :  "EUR",
            "billed_at" :  null
          }
        ],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```

You have to create at least either a token or a payment object before you can execute a transaction. You get back a response object indicating whether a transaction was successful or not.

Note

The transaction will not be charged at the bank if the test keys are implemented in your code. Please use only the test credit cards mentioned in the documentation.



Parameter         | Type                      | Description 
------------------|---------------------------|-----------------
amount            | integer (>0)              | Amount (in cents) which will be charged
currency          | string                    | ISO 4217 formatted currency code
description       | string / null             | A short description for the transaction
client            | string / null             | The identifier of a client (client-object). When this parameter is used, you have also to specify a payment method which is not assigned to a client yet. If you attempt to use this parameter when creating a transaction and when specifying a token or preauthorization, the specified client will be ignored.
token             | string                    | A token generated through our JavaScript-Bridge. When this parameter is used, none of the following should be used: payment, preauthorization.
payment           | string                    | The identifier of a payment (creditcard-object or directdebit-object). When this parameter is used, none of the following should be used: token, preauthorization.
preauthorization  | string                    | The identifier of a preauthorization (preauthorizations-object). When this parameter is used, none of the following should be used: token, payment.
fee_amount        | integer / null            | Fee included in the transaction amount (set by a connected app). Mandatory if fee_payment is set
fee_payment       | string / null             | The identifier of the payment from which the fee will be charged (creditcard-object or directdebit-object).
fee_currency      | string / unset            | The currency of the fee (e.g. EUR, USD). If it´s not set, the currency of the transaction is used. We suggest to always use as it might cause problems, if your account does not support the same currencies as your merchants accounts.


## `Transaction` details

> ### With transaction id

> Request

```bash
curl https://api.paymill.com/v2.1/transactions/tran_023d3b5769321c649435 \
  -u <YOUR_PRIVATE_KEY>:
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/get_transaction_details_by_id.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/get_transaction_details_by_id.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/get_transaction_details_by_id.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/get_transaction_details_by_id.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/get_transaction_details_by_id.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/get_transaction_details_by_id.cs') %>
```

> Response

```
{
    "data" : {
        "id" : "tran_023d3b5769321c649435",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "Test Transaction",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```

> ### With SLV

> Request

```bash
curl https://api.paymill.com/v2.1/transactions/slv_4125875679 \
  -u <YOUR_PRIVATE_KEY>:
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/get_transaction_details_by_slv.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/get_transaction_details_by_slv.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/get_transaction_details_by_slv.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/get_transaction_details_by_slv.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/get_transaction_details_by_slv.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/get_transaction_details_by_slv.cs') %>
```

> Response

```
{
    "data" : {
        "id" : "tran_023d3b5769321c649435",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "Test Transaction",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```
To receive the details of an existing transaction, call the unique transaction ID or the unique slv number. You can find the ID in the response of the previous request (or the slv number on your account statement). The return is a refund object with the information of the used payment, client and transaction attributes.


Parameter      | Type                     | Description 
---------------|--------------------------|-----------------
id             | string                   | Unique identifier of this transaction
slv number     | string                   | Unique 10 character long slv number of this transaction


## Update `Transaction`

> Request

```bash
curl https://api.paymill.com/v2.1/transactions/tran_023d3b5769321c649435 \
  -u <YOUR_PRIVATE_KEY>:  \
  -d "description=My updated transaction description" \
  -X PUT
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/update_transaction.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/update_transaction.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/update_transaction.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/update_transaction.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/update_transaction.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/update_transaction.cs') %>
```

> Response

```
{
    "data" : {
        "id" : "tran_023d3b5769321c649435",
        "amount" : "4200",
        "origin_amount" : 4200,
        "status" : "closed",
        "description" : "My updated transaction description",
        "livemode" : false,
        "refunds" : null,
        "client" : "<Object>",
        "currency" : "EUR",
        "created_at" : 1349946151,
        "updated_at" : 1349946151,
        "response_code" : 20000,
        "short_id" : "0000.1212.3434",
        "is_fraud" : false,
        "invoices" : [],
        "app_id" : null,
        "preauthorization" : null,
        "fees" : [],
        "payment" : "<Object>",
        "is_refundable" : true,
        "is_markable_as_fraud" : true
    },
    "mode" : "test"
}
```

This function updates the description of a transaction.


Parameter      | Type                     | Description 
---------------|--------------------------|-----------------
id             | string                   | Unique identifier of this transaction
description    | string / null            | Description for the transaction


## List `Transactions`

> Request

```bash
curl https://api.paymill.com/v2.1/transactions \
  -u <YOUR_PRIVATE_KEY>:
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/list_transactions.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/list_transactions.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/list_transactions.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/list_transactions.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/list_transactions.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/list_transactions.cs') %>
```

> Response

```
{
    "data" : [
        {
            "id" : "tran_03bb8f63d5278f723ced",
            "amount" : "4200",
            "origin_amount" : 4200,
            "status" : "closed",
            "description" : "ShoppingcartID 873242",
            "livemode" : false,
            "refunds" : null,
            "client" : "<Object>",
            "currency" : "EUR",
            "created_at" : 1349946151,
            "updated_at" : 1349946151,
            "response_code" : 20000,
            "short_id" : "0000.1212.3434",
            "is_fraud" : false,
            "invoices" : [],
            "app_id" : null,
            "preauthorization" : null,
            "fees" : [],
            "payment" : "<Object>",
            "is_refundable" : true,
            "is_markable_as_fraud" : true
        },
        {
            "id" : "tran_5e3105d4c2f34fe9d1f",
            "amount" : "5699",
            "origin_amount" : 5699,
            "status" : "closed",
            "description" : "ShoppingcartID 873243",
            "livemode" : false,
            "refunds" : null,
            "client" : "<Object>",
            "currency" : "EUR",
            "created_at" : 1349953847,
            "updated_at" : 1349953847,
            "response_code" : 20000,
            "short_id" : "0000.1212.3434",
            "is_fraud" : false,
            "invoices" : [],
            "app_id" : null,
            "preauthorization" : null,
            "fees" : [],
            "payment" : "<Object>",
            "is_refundable" : true,
            "is_markable_as_fraud" : true
        }
    ],
    "data_count" : "2",
    "mode" : "test"
}
```

This function returns a JSON object with a list of transactions. In which order this list is returned depends on the optional parameter order. The following parameters can be used:

  - count
  - offset
  - created_at

Available filters:

  - `client=<client id>`
  - `payment=<payment id>`
  - `amount=[>|<]<integer> e.g. “300” or with prefix: “>300” or “<300”`
  - `description=<string>`
  - `created_at=<timestamp> | <timestamp (from)>-<timestamp (to)>`
  - `updated_at=<timestamp> | <timestamp (from)>-<timestamp (to)>`
  - `status=<string> see list below`
  - `last4=<integer> last 4 digits of the credit card`

Available status for filters:

  - open
  - closed
  - failed
  - preauth
  - pending
  - refunded
  - partially_refunded
  - chargeback

## Export `Transactions` List

> Request

```bash
curl https://api.paymill.com/v2.1/transactions \
  -u <YOUR_PRIVATE_KEY>: \
  -H "Accept: text/csv"
```

```ruby
<%- @partial('snippets/ruby/samples/transactions/export_transactions_list.rb') %>
```

```java
<%- @partial('snippets/java/samples/transactions/export_transactions_list.java') %>
```

```javascript
<%- @partial('snippets/js/samples/transactions/export_transactions_list.js') %>
```

```python
<%- @partial('snippets/python/samples/transactions/export_transactions_list.py') %>
```

```php
<%- @partial('snippets/php/samples/transactions/export_transactions_list.php') %>
```

```csharp
<%- @partial('snippets/net/samples/transactions/export_transactions_list.cs') %>
```

> Response

```
"id";"amount";"origin_amount";"status";"description";"livemode";"currency";"created_at";"updated_at";"response_code";"short_id";"is_fraud";"app_id";"client_id";"payment_id";"preauthorization_id";"invoices";"fees"
"tran_494d384289fbaa1aa342a35723f7";"599";"599";"closed";"Test Transaction";"";"EUR";"1342427064";"1342427064";"20000";"7357.7357.7357";"";"";"client_53396385b7438a6a5cc2";"pay_2bbe85119a00f22d061eb752";;"";""
```

This function returns CSV separated by semicolons, encapsulated by double quotes, with a list of transactions. In which order this list is returned depends on the optional parameter order. The following parameters can be used:

  - amount
  - created_at
  - currency
  - description
  - status
  - updated_at

Available filters:

  - amount
  - client
  - created_at
  - currency
  - description
  - last4
  - payment
  - status
  - updated_at
